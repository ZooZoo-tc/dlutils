# -*- coding: utf-8 -*-
"""tfrecords.working.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15R_ii1x1Objzq49pCrFhjbxf9dqaQpa5
"""

import tensorflow as tf
import numpy
import requests
from shutil import copyfile
from .utils import *

class datasets():
    def load_cifar(self):
      return tf.keras.datasets.cifar10.load_data()

class TFRecord:
  base_path = '/content/drive/My Drive/models/tfrecords/'
  
  def __init__(self,base_path=base_path,is_mount_required=True):
    # tf.enable_eager_execution()
    self.base_path = base_path
    self.is_mount_required = is_mount_required
    self.datasets = datasets()
    if is_mount_required :
      mount()

  def _bytes_feature(value):
    """Returns a bytes_list from a string / byte."""
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))

  def _float_feature(value):
    """Returns a float_list from a float / double."""
    return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))

  def _int64_feature(value):
    """Returns an int64_list from a bool / enum / int / uint."""
    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))
   
  def convert_to_tfrecords(self,images, labels,fileName):
      with tf.io.TFRecordWriter(fileName) as writer:
        if isinstance(images[0], numpy.ndarray):
          n = images.shape[0]
          reshape = images.reshape(n, -1)
          for i in range(n):
            feature = {'image': tf.train.Feature(float_list=tf.train.FloatList(value=reshape[i])),'label': tf.train.Feature(int64_list=tf.train.Int64List(value=labels[i]))}
            example=tf.train.Example(features=tf.train.Features(feature=feature))
            writer.write(example.SerializeToString())

  def parse_tfrecord(tfrecord,h=32,w=32,c=3):
        dtype=tf.float32
        features = {'image': tf.FixedLenFeature([h * w * c], dtype),
                    'label': tf.FixedLenFeature([], tf.int64)}
        example = tf.io.parse_single_example(tfrecord, features=features)
        x, y = example["image"], example['label']
        x = tf.reshape(x, [h, w, c])
        return x, y
  def _parse_function(proto):
    # define your tfrecord again. Remember that you saved your image as a string.
    # keys_to_features = {'image_raw': tf.FixedLenFeature([], tf.string),
    #                     "label": tf.FixedLenFeature([], tf.int64)}
    h=32
    w=32
    c=3
    dtype=tf.float32
    features = {'image': tf.FixedLenFeature([h * w * c], dtype),
                 'label': tf.FixedLenFeature([], tf.int64)}
    # example = tf.parse_single_example(proto, features=features)
    example = tf.io.parse_single_example(proto, features=features)
    # parsed_image = tf.io.decode_raw(example["image_raw"], tf.uint8)
    # parsed_image = tf.cast(parsed_image, tf.float32)

# parsed = tf.io.parse_single_example(record, keys_to_features)
#     parsed_image = tf.io.decode_raw(parsed["image"], tf.uint8)
#     parsed_image = tf.cast(parsed_image, tf.float32)
#     parsed_image=  tf.reshape(parsed_image, [ parsed["height"], parsed["width"], parsed["depth"]])    
#     label = tf.cast(parsed["label"], tf.int32)


    # image = tf.decode_raw(example['image_raw'], tf.float32)
    # image = tf.cast(image, tf.float32)

    # image = tf.image.decode_jpeg(example['image_raw'], channels=3)
    # image = tf.cast(example, tf.float32)
    x, y = example["image"], example['label']
    x = tf.reshape(x, [h, w, c])
    print(type(x),'----',x,'---------',y)

    # # Load one example
    # parsed_features = tf.parse_single_example(proto, keys_to_features)
    
    # # Turn your saved image string into an array
    # parsed_features['image_raw'] = tf.decode_raw(
    #     parsed_features['image_raw'], tf.uint8)
    
    # return parsed_features['image_raw'], parsed_features["label"]
    return x, y
  def load_cifar10(self):
      cifar10_tfrecord_path = self.base_path+'cifar10/'
      mkdirs(cifar10_tfrecord_path)
      train_tf_record_filepath = cifar10_tfrecord_path+'train.tfrecords'
      test_tf_record_filepath = cifar10_tfrecord_path+'test.tfrecords'

      if is_file_exists(train_tf_record_filepath) == False:      
          (x_train, y_train), (x_test, y_test) = self.datasets.load_cifar()
          self.convert_to_tfrecords(x_train,y_train,'train.tfrecords')
          self.convert_to_tfrecords(x_test,y_test,'test.tfrecords')
          copyfile('train.tfrecords', train_tf_record_filepath)
          os.remove('train.tfrecords')
          copyfile('test.tfrecords', test_tf_record_filepath)
          os.remove('test.tfrecords')
      return (train_tf_record_filepath,test_tf_record_filepath)

# (train_tf_record_filepath,test_tf_record_filepath) = TFRecord().load_cifar10()
# print(train_tf_record_filepath,'---',test_tf_record_filepath)